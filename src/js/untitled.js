"use strict";
Rest оператор и параметры по умолчанию
Rest брат оператора spred (разворота)
Он использует такой же синтаксис но в других условиях
Если spred брал сущность и раскладывал ее на отдельные элементы то rest отдельные элементы объединяет в один массив

Rest оставшиеся элементы

const log = function(a, b, ...rest) {
  console.log(a, b, rest);
}

log('basic', 'rest', 'operator', 'usage');

rest может быть назван как угодно мжоно просто переменная например С.
Rest оператор который записывается ... всегда последним.Говорит о том что здесь можем быть бесконечное количество аргументов
результат:
basic rest [ 'operator', 'usage' ]
rest оператор  собрал лишние переменные и создал из них массив.
Спред оператор имеет обратную функцию но точно такой же синтаксис.

Параметры по умолчанию.

Иногда мы хотим чтобы в наших функциях  были параметры по умолчанию

function calcOrDoouble(number, basis) {
  console.log(number * basis);
}

calcOrDoouble(3, 5);

Если не ввести второй аргумент то будет ошибка

Скорректируем функцию так чтобы если не ввели второй аргумент он подставлялся автоматически. Чтобы был параметр по умолчанию.

До стандарта ES6 использовали не задокументированный прием с использованием логического оператора или.

function calcOrDoouble(number, basis) {
  basis = basis || 2;
  console.log(number * basis);
}

calcOrDoouble(3);

Если basis нн был передан это значит что у нас undefined и соответственно или вернет первую правду это 2.

Но такая проверка в отдельных случаях могла приводить к ошибке поэтому такая проверка  не совсем надежный вариант.
В стандарте ES6 стало все проще. Параметр по умолчанию можно записывать при объявлении функции.

function calcOrDoouble(number, basis = 2) {
  console.log(number * basis);
}

calcOrDoouble(3);
